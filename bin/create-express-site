#! /bin/bash

#
# Downloads and installs node.js, Node Package Manager (npm) and express.
# Creates a new express site in the app directory.
#

main() {
    site_dir=$(cd `dirname $0`/../; pwd)
    start_dir="$(pwd)"
    git_repo_url='git@github.com:jmcclare/node-express-template.git'


    # Install the configured version of node.

    ${site_dir}/bin/initialize-node

    cd $site_dir
    # Source our environment variables to setup the path
    . ./bin/set-env


    # This set of commands is what creates a new Express site if you do not
    # already have a full template of your own. You can uncomment and run these to
    # see the newest version of the the starting Express site template.
    # 
    # # Install express and create the new site
    # 
    # # Install express
    # npm install -g express
    # # Create the new express site with .jade templates.
    # # NOTE: We will probably override all of this with our own packages.json
    # express app
    # # Install the site's dependencies (including express)
    # cd app
    # npm install


    # Clone our node-express-template repo into a new app directory and delete
    # its .git dir.

    if [ -d "${site_dir}/app" ]
    then
        die "There is already an app directory in this project. Rename or remove that before we create the starting Express site."
    fi

    git clone "${git_repo_url}" "${site_dir}/app"
    check_err $? "Something went wrong cloning ${git_repo_url}"

    rm -rf "${site_dir}/app/.git"


    # Install the site’s node_modules, in case they are not included in the
    # repo.
    cd app
    npm install


    # NOTE: Hold off on this part until we figure out how to get Nginx to serve
    # specific path extensions with it's own static file server.
    #
    # Move the contents of the app's public directory into the site's main public
    # directory and delete the app's.
    #rsync -rltvp ${site_dir}/app/public/* ${site_dir}/public/
    #rm -rf ${site_dir}/app/public

    # Tell Node to use the site's main public directory
    #sed -i "s/ *app\.use(express\.static(.*/  app.use(express.static(path.join(__dirname.substring(0, __dirname.lastIndexOf(\"\/\")), 'public')));/" ${site_dir}/app/app.js


    echo
    echo "At this point, if you are serving the site in production mode, you should restart it."
    echo "This is usually done with upstart:"
    echo
    echo "sudo stop node-site-name; sudo start node-site-name"
    echo
    echo "See server-info.txt, if provided."
}


#
# warn - print warning message
#
# $1 - message
#
warn()
{
    # print to regular output in regular orange
    printf "\e[0;33m"
    # Print the message with `echo` to prevent anything in the string from
    # being interpreted as formatting characters.
    echo "${1}"
    printf "\e[m"
}


#
# alarm - print alarm / error message
#
# $1 - message
#
alarm()
{
    # print to error output in bold red
    printf "\e[1;31m" >&2
    # Print the message with `echo` to prevent anything in the string from
    # being interpreted as formatting characters.
    echo "${1}" >&2
    printf "\e[m" >&2
}


#
# die - print an alarm message and exit with an error code
#
# $1 - error message to print
# $2 - (optional) error code to exit with, defaults to 1
#
die()
{
    alarm "${1}"

    if [ ! -z "${2}" ]
    then
        exit ${2}
    else
        exit 1
    fi
}


#
# check_err - check an error code and exit if it’s not success.
#
# $1 - return code to check
# $2 - (optional) text to display on failure. Defaults to basic message.
# $3 - (optional) error code to exit with on failure, defaults to 1
#
check_err()
{
    if [ "${1}" -ne "0" ]
    then
        if [ -z "${2}" ]
        then
            message="Command returned fatal error."
        else
            message="${2}"
        fi

        if [ -z "${3}" ]
        then
            die "${2}"
        else
            die "${2}" "${3}"
        fi
    fi
}


main "${@}"
