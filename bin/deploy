#! /bin/bash

#
# Updates the live site with this directory's version.
#


#
# These determine which server and user to use and which site to
# update.
#
server='example.com'
server_user='username'
remote_site_name='something.com'


site_dir=`cd $(dirname $0); cd ..; pwd`


echo
echo
echo "Syncing files to site directory ${remote_site_name} on server ${server}..."
echo

# Sync the project directory minux the app.
rsync -rltp --delete --exclude=/app --exclude=server-info.txt --exclude=.htpasswd --exclude=.git --exclude=.gitignore --exclude=.gitatributes ${site_dir}/ ${server_user}@${server}:/srv/www/${remote_site_name}
# Sync the built app.
rsync -rltp --delete --exclude='/public/_data' --exclude=.git --exclude=.gitignore --exclude=.gitatributes ${site_dir}/app/build/ ${server_user}@${server}:/srv/www/${remote_site_name}/app


if [ -d "${site_dir}/app/.git" ]
then
    # Place the current git commit ID in a text file in the deployed app
    # directory for troubleshooting.
    commit_id="$(git rev-parse HEAD)"
    ssh ${server_user}@${server} "cd /srv/www/${remote_site_name}/app; echo $commit_id >> git-commit-id"
fi


# Fix the site dir permissions that rsync may have broken. rsync matches it to
# our local directory, which may be wrong for the server.
ssh ${server_user}@${server} "find /srv/www/${remote_site_name} -type d -exec chmod a+rx {} +; find /srv/www/${remote_site_name} -type f -exec chmod a+r {} +"


echo
echo
echo "Restarting site..."
echo
ssh ${server_user}@${server} "sudo /bin/systemctl stop node-${remote_site_name}; sudo /bin/systemctl start node-${remote_site_name}"
